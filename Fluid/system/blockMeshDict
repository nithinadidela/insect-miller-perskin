FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1;

vertices #codeStream
{
    codeInclude
    #{
        #include "pointField.H"
    #};

    code
    #{

    pointField points(42);
    points[0]  = point(-0.353553, 0.353553, -0.01);
    points[1]  = point(0.353553, -0.353553, -0.01);
    points[2]  = point(0.707107, -0.707107, -0.01);
    points[3]  = point(0.692965, -0.721249, -0.01);
    points[4]  = point(0.339411, -0.367696, -0.01);
    points[5]  = point(-0.367696, 0.339411, -0.01);
    points[6]  = point(-0.716158, 0.698056, -0.01);
    points[7]  = point(-0.707107, 0.707107, -0.01);
    points[8]  = point(-0.707107, 8, -0.01);
    points[9]  = point(-0.353553, 8, -0.01);
    points[10]  = point(-0.353553, 1.060660, -0.01);
    points[11]  = point(0, 0.707107, -0.01);
    points[12]  = point(0, 8, -0.01);
    points[13]  = point(0.707107, 8, -0.01);
    points[14]  = point(0.707107, 0, -0.01);
    points[15]  = point(1.060660, -0.353553, -0.01);
    points[16]  = point(1.06066, 8, -0.01);
    points[17]  = point(25, 8, -0.01);
    points[18]  = point(25, -0.353553, -0.01);
    points[19]  = point(25, -8, -0.01);
    points[20]  = point(1.060660, -8, -0.01);
    points[21]  = point(0.707107, -8, -0.01);
    points[22]  = point(0.692965, -8, -0.01);
    points[23]  = point(0.344502, -8, -0.01);
    points[24]  = point(0.344502, -1.069711, -0.01);
    points[25]  = point(-0.0090509668, -0.71615774799, -0.01);
    points[26]  = point(-0.0090509668, -8, -0.01);
    points[27]  = point(-0.716158, -8, -0.01);
    points[28]  = point(-0.71615774799, -0.0090509668, -0.01);
    points[29]  = point(-1.069711, 0.344502, -0.01);
    points[30]  = point(-1.069711, -8, -0.01);
    points[31]  = point(-8, -8, -0.01);
    points[32]  = point(-8, 0.344502, -0.01);
    points[33]  = point(-8, 8, -0.01);
    points[34]  = point(-1.069711, 8, -0.01);
    points[35]  = point(-0.721249, 8, -0.01);

    points[36]  = point(0, 0, -0.01);
    points[37]  = point(0.3535085, 0.3535085, -0.01);
    points[38]  = point(0.3535085, 8, -0.01);
    points[39]  = point(-0.0141425, -0.0141425, -0.01);
    points[40]  = point(-0.3626043584, -0.3626043584, -0.01);
    points[41]  = point(-0.3626043584, -8, -0.01);

    // Duplicate z points
    label sz = points.size();
    points.setSize(2*sz);
    for (label i = 0; i < sz; i++)
    {
        const point& pt = points[i];
        points[i+sz] = point(pt.x(), pt.y(), -pt.z());
    }


            os  << points;
        #};
    };
    blocks
    (

    hex (6 5 0 7 48 47 42 49) (50 2 1) simpleGrading (1 1 1) //0
    hex (7 0 11 10 49 42 53 52) (50 50 1) simpleGrading (1 1 1) //1

    hex (0 36 37 11 42 78 79 53) (50 50 1) simpleGrading (1 1 1) //2
    hex (36 1 14 37 78 43 56 79) (50 50 1) simpleGrading (1 1 1) //24

    hex (1 2 15 14 43 44 57 56) (50 50 1) simpleGrading (1 1 1) //3
    hex (4 3 2 1 46 45 44 43) (50 2 1) simpleGrading (1 1 1) //4
    hex (25 24 3 4 67 66 45 46) (50 40 1) simpleGrading (1 1 1) //5

    hex (40 25 4 39 82 67 46 81) (50 40 1) simpleGrading (1 1 1) //6
    hex (28 40 39 5 70 82 81 47) (50 40 1) simpleGrading (1 1 1) //25

    hex (29 28 5 6 71 70 47 48) (50 40 1) simpleGrading (1 1 1) //7
    hex (29 6 35 34 71 48 77 76) (40 37 1) simpleGrading (1 84.7668833 1) //8
    hex (6 7 8 35 48 49 50 77) (2 37 1) simpleGrading (1 84.7668833 1) //9
    hex (7 10 9 8 49 52 51 50) (50 37 1) simpleGrading (1 84.7668833 1) //10
    hex (10 11 12 9 52 53 54 51) (50 37 1) simpleGrading (1 84.7668833 1) //11

    hex (11 37 38 12 53 79 80 54) (50 37 1) simpleGrading (1 84.7668833 1) //12
    hex (37 14 13 38 79 56 55 80) (50 37 1) simpleGrading (1 84.7668833 1) //26

    hex (14 15 16 13 56 57 58 55) (50 37 1) simpleGrading (1 84.7668833 1) //13
    hex (15 18 17 16 57 60 59 58) (50 37 1) simpleGrading (403.9092374 84.7668833 1) //14
    hex (20 19 18 15 62 61 60 57) (50 37 1) simpleGrading (403.9092374 0.011797059 1) //15
    hex (21 20 15 2 63 62 57 44) (50 37 1) simpleGrading (1 0.011797059 1) //16
    hex (22 21 2 3 64 63 44 45) (2 37 1) simpleGrading (1 0.011797059 1) //17
    hex (23 22 3 24 65 64 45 66) (40 37 1) simpleGrading (1 0.011797059 1) //18
    hex (26 23 24 25 68 65 66 67) (50 37 1) simpleGrading (1 0.011797059 1) //19

    hex (41 26 25 40 83 68 67 82) (50 37 1) simpleGrading (1 0.011797059 1) //20
    hex (27 41 40 28 69 83 82 70) (50 37 1) simpleGrading (1 0.011797059 1) //27

    hex (30 27 28 29 72 69 70 71) (50 37 1) simpleGrading (1 0.011797059 1) //21
    hex (31 30 29 32 73 72 71 74) (50 37 1) simpleGrading (0.008383950224 0.011797059 1) //22
    hex (32 29 34 33 74 71 76 75) (50 37 1) simpleGrading (0.008383950224 84.7668833 1) //23
    );

 edges
    (

    );


    boundary
    (
        down
        {
            type wall;
            faces
            (
              (31 30 73 72)
              (30 27 72 69)
	      (27 41 69 83)
              (41 26 83 68)
              (26 23 68 65)
              (23 22 65 64)
              (22 21 64 63)
              (21 20 63 62)
              (20 19 62 61)


            );
        }
        right
        {
            type patch;
            faces
            (
	      (17 18 59 60)
              (18 19 60 61)
              );
        }
        up
        {
            type wall;
            faces
            (
              (33 34 75 76)
              (34 35 76 77)
              (35 8 77 50)
              (8 9 50 51)
              (9 12 51 54)
              (12 38 54 80)
              (38 13 80 55)
              (13 16 55 58) 
              (16 17 58 59)

            );
        }
        left
        {
            type patch;
            faces
            (
              (33 32 75 74)
              (32 31 74 73)    
	);
        }

        fixed
        {
            type wall;
            faces
            (
              (36 0 78 42)
              (0 5 42 47)
              (5 39 47 81)
              //(39 36 81 78)
            );
        }

        flap
        {
            type wall;
            faces
            (
              //(36 39 78 81)
              (39 4 81 46)
              (4 1 46 43)
              (1 36 43 78)
            );
        }

      frontAndBack
    {
        type empty;
        faces
        (
(6 5 0 7)(48 47 42 49)
(7 0 11 10)(49 42 53 52)
(0 36 37 11)(42 78 79 53)
//(0 5 39 36)(42 47 81 78)
//(36 39 4 1)(78 81 46 43)
(36 1 14 37)(78 43 56 79)
(1 2 15 14)(43 44 57 56)
(4 3 2 1)(46 45 44 43)
(25 24 3 4)(67 66 45 46)
(40 25 4 39)(82 67 46 81)
(28 40 39 5)(70 82 81 47)
(29 28 5 6)(71 70 47 48)
(29 6 35 34)(71 48 77 76)
(6 7 8 35)(48 49 50 77)
(7 10 9 8)(49 52 51 50)
(10 11 12 9)(52 53 54 51)
(11 37 38 12)(53 79 80 54)
(37 14 13 38)(79 56 55 80)
(14 15 16 13)(56 57 58 55)
(15 18 17 16)(57 60 59 58)
(20 19 18 15)(62 61 60 57)
(21 20 15 2)(63 62 57 44)
(22 21 2 3)(64 63 44 45)
(23 22 3 24)(65 64 45 66)
(26 23 24 25)(68 65 66 67)
(41 26 25 40)(83 68 67 82)
(27 41 40 28)(69 83 82 70)
(30 27 28 29)(72 69 70 71)
(31 30 29 32)(73 72 71 74)
(32 29 34 33)(74 71 76 75)


  );
    }


    );

    mergePatchPairs
    (
    );

    
